        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      120:    8:int compare(const void* a, const void* b) {
      120:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      120:   11:  if (*(int*)a < *(int*)b)
       32:   12:    return -1;
       88:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:      int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        4:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:
        -:   39:  int i;
        -:   40:  int j;
        -:   41:  int it;     
        -:   42:  //set up random number generator
        4:   43:  SelectStream(1);
        4:   44:  PutSeed((long)randomSeed);
        -:   45:  
        -:   46:  //check number of players
        4:   47:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   48:    {
    #####:   49:      return -1;
        -:   50:    }
        -:   51:
        -:   52:  //set number of players
        4:   53:  state->numPlayers = numPlayers;
        -:   54:
        -:   55:  //check selected kingdom cards are different
       44:   56:  for (i = 0; i < 10; i++)
        -:   57:    {
      440:   58:      for (j = 0; j < 10; j++)
        -:   59:        {
      400:   60:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   61:      {
    #####:   62:        return -1;
        -:   63:      }
        -:   64:        }
        -:   65:    }
        -:   66:
        -:   67:
        -:   68:  //initialize supply
        -:   69:  ///////////////////////////////
        -:   70:
        -:   71:  //set number of Curse cards
        4:   72:  if (numPlayers == 2)
        -:   73:    {
        4:   74:      state->supplyCount[curse] = 10;
        -:   75:    }
    #####:   76:  else if (numPlayers == 3)
        -:   77:    {
    #####:   78:      state->supplyCount[curse] = 20;
        -:   79:    }
        -:   80:  else
        -:   81:    {
    #####:   82:      state->supplyCount[curse] = 30;
        -:   83:    }
        -:   84:
        -:   85:  //set number of Victory cards
        4:   86:  if (numPlayers == 2)
        -:   87:    {
        4:   88:      state->supplyCount[estate] = 8;
        4:   89:      state->supplyCount[duchy] = 8;
        4:   90:      state->supplyCount[province] = 8;
        -:   91:    }
        -:   92:  else
        -:   93:    {
    #####:   94:      state->supplyCount[estate] = 12;
    #####:   95:      state->supplyCount[duchy] = 12;
    #####:   96:      state->supplyCount[province] = 12;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Treasure cards
        4:  100:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  101:  state->supplyCount[silver] = 40;
        4:  102:  state->supplyCount[gold] = 30;
        -:  103:
        -:  104:  //set number of Kingdom cards
       84:  105:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  106:    {
      664:  107:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  108:  {
      620:  109:    if (kingdomCards[j] == i)
        -:  110:      {
        -:  111:        //check if card is a 'Victory' Kingdom card
       36:  112:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  113:    {
    #####:  114:      if (numPlayers == 2){ 
    #####:  115:        state->supplyCount[i] = 8; 
        -:  116:      }
    #####:  117:      else{ state->supplyCount[i] = 12; }
        -:  118:    }
        -:  119:        else
        -:  120:    {
       36:  121:      state->supplyCount[i] = 10;
        -:  122:    }
       36:  123:        break;
        -:  124:      }
        -:  125:    else    //card is not in the set choosen for the game
        -:  126:      {
      584:  127:        state->supplyCount[i] = -1;
        -:  128:      }
        -:  129:  }
        -:  130:
        -:  131:    }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
       12:  137:  for (i = 0; i < numPlayers; i++)
        -:  138:    {
        8:  139:      state->deckCount[i] = 0;
       32:  140:      for (j = 0; j < 3; j++)
        -:  141:  {
       24:  142:    state->deck[i][j] = estate;
       24:  143:    state->deckCount[i]++;
        -:  144:  }
       64:  145:      for (j = 3; j < 10; j++)
        -:  146:  {
       56:  147:    state->deck[i][j] = copper;
       56:  148:    state->deckCount[i]++;    
        -:  149:  }
        -:  150:    }
        -:  151:
        -:  152:  //shuffle player decks
       12:  153:  for (i = 0; i < numPlayers; i++)
        -:  154:    {
        8:  155:      if ( shuffle(i, state) < 0 )
        -:  156:  {
    #####:  157:    return -1;
        -:  158:  }
        -:  159:    }
        -:  160:
        -:  161:  //draw player hands
       12:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:    {  
        -:  164:      //initialize hand size to zero
        8:  165:      state->handCount[i] = 0;
        8:  166:      state->discardCount[i] = 0;
        -:  167:      //draw 5 cards
        -:  168:      // for (j = 0; j < 5; j++)
        -:  169:      //  {
        -:  170:      //    drawCard(i, state);
        -:  171:      //  }
        -:  172:    }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
      112:  175:  for (i = 0; i <= treasure_map; i++)
        -:  176:    {
      108:  177:      state->embargoTokens[i] = 0;
        -:  178:    }
        -:  179:
        -:  180:  //initialize first player's turn
        4:  181:  state->outpostPlayed = 0;
        4:  182:  state->phase = 0;
        4:  183:  state->numActions = 1;
        4:  184:  state->numBuys = 1;
        4:  185:  state->playedCardCount = 0;
        4:  186:  state->whoseTurn = 0;
        4:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
       24:  191:  for (it = 0; it < 5; it++){
       20:  192:    drawCard(state->whoseTurn, state);
        -:  193:  }
        -:  194:
        4:  195:  updateCoins(state->whoseTurn, state, 0);
        -:  196:
        4:  197:  return 0;
        -:  198:}
        -:  199:
        8:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
        8:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
        8:  208:  if (state->deckCount[player] < 1)
    #####:  209:    return -1;
        8:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
       96:  213:  while (state->deckCount[player] > 0) {
       80:  214:    card = floor(Random() * state->deckCount[player]);
       80:  215:    newDeck[newDeckPos] = state->deck[player][card];
       80:  216:    newDeckPos++;
      280:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
      200:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
       80:  220:    state->deckCount[player]--;
        -:  221:  }
       88:  222:  for (i = 0; i < newDeckPos; i++) {
       80:  223:    state->deck[player][i] = newDeck[i];
       80:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
        8:  227:  return 0;
        -:  228:}
        -:  229:
        2:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{ 
        -:  232:  int card;
        2:  233:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
        2:  236:  if (state->phase != 0)
        -:  237:    {
    #####:  238:      return -1;
        -:  239:    }
        -:  240:  
        -:  241:  //check if player has enough actions
        2:  242:  if ( state->numActions < 1 )
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:  
        -:  247:  //get card played
        2:  248:  card = handCard(handPos, state);
        -:  249:  
        -:  250:  //check if selected card is an action
        2:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:  
        -:  256:  //play card
        2:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:  
        -:  262:  //reduce number of actions
        2:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
        2:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:  
        2:  268:  return 0;
        -:  269:}
        -:  270:
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:  
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
    #####:  307:  return 0;
        -:  308:}
        -:  309:
    #####:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
        2:  314:int handCard(int handPos, struct gameState *state) {
        2:  315:  int currentPlayer = whoseTurn(state);
        2:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
        4:  319:int supplyCount(int card, struct gameState *state) {
        4:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
        -:  340:    }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
        4:  345:int whoseTurn(struct gameState *state) {
        4:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
    #####:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
    #####:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:  
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
    #####:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
        -:  404:  {
    #####:  405:    j++;
        -:  406:  }
        -:  407:    }
    #####:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
        -:  414:}
        -:  415:
    #####:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;  
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:  {
    #####:  468:    players[i] = -9999;
        -:  469:  }
        -:  470:      else
        -:  471:  {
    #####:  472:    players[i] = scoreFor (i, state);
        -:  473:  }
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
        -:  481:  {
    #####:  482:    j = i;
        -:  483:  }
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
        -:  492:  {
    #####:  493:    players[i]++;
        -:  494:  }
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
        -:  502:  {
    #####:  503:    j = i;
        -:  504:  }
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
        -:  512:  {
    #####:  513:    players[i] = 1;
        -:  514:  }
        -:  515:      else
        -:  516:  {
    #####:  517:    players[i] = 0;
        -:  518:  }
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
       20:  524:int drawCard(int player, struct gameState *state)
        -:  525:{ int count;
        -:  526:  int deckCounter;
       20:  527:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
    #####:  532:    for (i = 0; i < state->discardCount[player];i++){
    #####:  533:      state->deck[player][i] = state->discard[player][i];
    #####:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
    #####:  537:    state->deckCount[player] = state->discardCount[player];
    #####:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
    #####:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
    #####:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
    #####:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
    #####:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
    #####:  558:    if (deckCounter == 0)
    #####:  559:      return -1;
        -:  560:
    #####:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  562:    state->deckCount[player]--;
    #####:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
       20:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       20:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  575:    state->deckCount[player]--;
       20:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       20:  579:  return 0;
        -:  580:}
        -:  581:
       17:  582:int getCost(int cardNumber)
        -:  583:{
       17:  584:  switch( cardNumber ) 
        -:  585:    {
        -:  586:    case curse:
        4:  587:      return 0;
        -:  588:    case estate:
        2:  589:      return 2;
        -:  590:    case duchy:
        2:  591:      return 5;
        -:  592:    case province:
        2:  593:      return 8;
        -:  594:    case copper:
    #####:  595:      return 0;
        -:  596:    case silver:
    #####:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
        2:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
        2:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
        1:  613:      return 4;
        -:  614:    case village:
    #####:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
    #####:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
        1:  629:      return 4;
        -:  630:    case embargo: 
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
        1:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:  
    #####:  642:  return -1;
        -:  643:}
        -:  644:
        2:  645:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  646:{
        -:  647:  int i;
        -:  648:  int j;
        -:  649:  int k;
        -:  650:  int x;
        -:  651:  int index;
        2:  652:  int currentPlayer = whoseTurn(state);
        2:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
        2:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        2:  657:  int drawntreasure=0;
        -:  658:  int cardDrawn;
        2:  659:  int z = 0;// this is the counter for the temp hand
        2:  660:  if (nextPlayer > (state->numPlayers - 1)){
        2:  661:    nextPlayer = 0;
        -:  662:  }
        -:  663:  
        -:  664:  
        -:  665:  //uses switch to select card and perform actions
        2:  666:  switch( card ) 
        -:  667:    {
        -:  668:    case adventurer:
    #####:  669:        adventurerAction(state);
    #####:  670:      return 0;
        -:  671:      
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
        -:  675:  {
    #####:  676:    drawCard(currentPlayer, state);
        -:  677:  }
        -:  678:      
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:      
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
        -:  684:  {
    #####:  685:    if ( i != currentPlayer )
        -:  686:      {
    #####:  687:        drawCard(i, state);
        -:  688:      }
        -:  689:  }
        -:  690:      
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:      
    #####:  694:      return 0;
        -:  695:      
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
        4:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        2:  700:  temphand[i] = state->hand[currentPlayer][i];//Backup card
        2:  701:  state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
        2:  706:      updateCoins(currentPlayer, state, 5);
        2:  707:      x = 1;//Condition to loop on
        6:  708:      while( x == 1) {//Buy one card
        2:  709:  if (supplyCount(choice1, state) <= 0){
        -:  710:    if (DEBUG)
        -:  711:      printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:    if (DEBUG){
        -:  714:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:    }
        -:  716:  }
        2:  717:  else if (state->coins < getCost(choice1)){
    #####:  718:    printf("That card is too expensive!\n");
        -:  719:
        -:  720:    if (DEBUG){
        -:  721:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:    }
        -:  723:  }
        -:  724:  else{
        -:  725:
        -:  726:    if (DEBUG){
        -:  727:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:    }
        -:  729:
        2:  730:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
        2:  731:    x = 0;//No more buying cards
        -:  732:
        -:  733:    if (DEBUG){
        -:  734:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:    }
        -:  736:
        -:  737:  }
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
        4:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        2:  742:  state->hand[currentPlayer][i] = temphand[i];
        2:  743:  temphand[i] = -1;
        -:  744:      }
        -:  745:      //Reset Hand
        -:  746:            
        2:  747:      return 0;
        -:  748:      
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:      
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  756:  {
    #####:  757:    return -1;
        -:  758:  }
        -:  759:    
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
        -:  761:  {
    #####:  762:    return -1;
        -:  763:  }
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  766:  {
    #####:  767:    return -1;
        -:  768:  }
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  777:  {
    #####:  778:    if (state->hand[currentPlayer][i] == j)
        -:  779:      {
    #####:  780:        discardCard(i, currentPlayer, state, 0);      
    #####:  781:        break;
        -:  782:      }
        -:  783:  }
        -:  784:      
    #####:  785:      return 0;
        -:  786:      
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  791:  {
    #####:  792:    return -1;
        -:  793:  }
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  802:  {
    #####:  803:    if (state->hand[currentPlayer][i] == j)
        -:  804:      {
    #####:  805:        discardCard(i, currentPlayer, state, 0);      
    #####:  806:        break;
        -:  807:      }
        -:  808:  }
        -:  809:
        -:  810:
    #####:  811:      return 0;
        -:  812:    
        -:  813:    case smithy:
    #####:  814:      smithyAction(state, handPos);
    #####:  815:      return 0;
        -:  816:    
        -:  817:    case village:
    #####:  818:      villageAction(state, handPos);
    #####:  819:      return 0;
        -:  820:    
        -:  821:    case baron:
    #####:  822:      state->numBuys++;//Increase buys by 1!
    #####:  823:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  824:  int p = 0;//Iterator for hand!
    #####:  825:  int card_not_discarded = 1;//Flag for discard set!
    #####:  826:  while(card_not_discarded){
    #####:  827:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  828:      state->coins += 4;//Add 4 coins to the amount of coins
    #####:  829:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  830:      state->discardCount[currentPlayer]++;
    #####:  831:      for (;p < state->handCount[currentPlayer]; p++){
    #####:  832:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  833:      }
    #####:  834:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  835:      state->handCount[currentPlayer]--;
    #####:  836:      card_not_discarded = 0;//Exit the loop
        -:  837:    }
    #####:  838:    else if (p > state->handCount[currentPlayer]){
        -:  839:      if(DEBUG) {
        -:  840:        printf("No estate cards in your hand, invalid choice\n");
        -:  841:        printf("Must gain an estate if there are any\n");
        -:  842:      }
    #####:  843:      if (supplyCount(estate, state) > 0){
    #####:  844:        gainCard(estate, state, 0, currentPlayer);
    #####:  845:        state->supplyCount[estate]--;//Decrement estates
    #####:  846:        if (supplyCount(estate, state) == 0){
    #####:  847:    isGameOver(state);
        -:  848:        }
        -:  849:      }
    #####:  850:      card_not_discarded = 0;//Exit the loop
        -:  851:    }
        -:  852:          
        -:  853:    else{
    #####:  854:      p++;//Next card
        -:  855:    }
        -:  856:  }
        -:  857:      }
        -:  858:          
        -:  859:      else{
    #####:  860:  if (supplyCount(estate, state) > 0){
    #####:  861:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  862:    state->supplyCount[estate]--;//Decrement Estates
    #####:  863:    if (supplyCount(estate, state) == 0){
    #####:  864:      isGameOver(state);
        -:  865:    }
        -:  866:  }
        -:  867:      }
        -:  868:      
        -:  869:      
    #####:  870:      return 0;
        -:  871:    
        -:  872:    case great_hall:
        -:  873:      //+1 Card
    #####:  874:      drawCard(currentPlayer, state);
        -:  875:      
        -:  876:      //+1 Actions
    #####:  877:      state->numActions++;
        -:  878:      
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
    #####:  881:      return 0;
        -:  882:    
        -:  883:    case minion:
        -:  884:      //+1 action
    #####:  885:      state->numActions++;
        -:  886:      
        -:  887:      //discard card from hand
    #####:  888:      discardCard(handPos, currentPlayer, state, 0);
        -:  889:      
    #####:  890:      if (choice1)    //+2 coins
        -:  891:  {
    #####:  892:    state->coins = state->coins + 2;
        -:  893:  }
        -:  894:      
    #####:  895:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  896:  {
        -:  897:    //discard hand
    #####:  898:    while(numHandCards(state) > 0)
        -:  899:      {
    #####:  900:        discardCard(handPos, currentPlayer, state, 0);
        -:  901:      }
        -:  902:        
        -:  903:    //draw 4
    #####:  904:    for (i = 0; i < 4; i++)
        -:  905:      {
    #####:  906:        drawCard(currentPlayer, state);
        -:  907:      }
        -:  908:        
        -:  909:    //other players discard hand and redraw if hand size > 4
    #####:  910:    for (i = 0; i < state->numPlayers; i++)
        -:  911:      {
    #####:  912:        if (i != currentPlayer)
        -:  913:    {
    #####:  914:      if ( state->handCount[i] > 4 )
        -:  915:        {
        -:  916:          //discard hand
    #####:  917:          while( state->handCount[i] > 0 )
        -:  918:      {
    #####:  919:        discardCard(handPos, i, state, 0);
        -:  920:      }
        -:  921:              
        -:  922:          //draw 4
    #####:  923:          for (j = 0; j < 4; j++)
        -:  924:      {
    #####:  925:        drawCard(i, state);
        -:  926:      }
        -:  927:        }
        -:  928:    }
        -:  929:      }
        -:  930:        
        -:  931:  }
    #####:  932:      return 0;
        -:  933:    
        -:  934:    case steward:
    #####:  935:      if (choice1 == 1)
        -:  936:  {
        -:  937:    //+2 cards
    #####:  938:    drawCard(currentPlayer, state);
    #####:  939:    drawCard(currentPlayer, state);
        -:  940:  }
    #####:  941:      else if (choice1 == 2)
        -:  942:  {
        -:  943:    //+2 coins
    #####:  944:    state->coins = state->coins + 2;
        -:  945:  }
        -:  946:      else
        -:  947:  {
        -:  948:    //trash 2 cards in hand
    #####:  949:    discardCard(choice2, currentPlayer, state, 1);
    #####:  950:    discardCard(choice3, currentPlayer, state, 1);
        -:  951:  }
        -:  952:      
        -:  953:      //discard card from hand
    #####:  954:      discardCard(handPos, currentPlayer, state, 0);
    #####:  955:      return 0;
        -:  956:    
        -:  957:    case tribute:
    #####:  958:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  959:  if (state->deckCount[nextPlayer] > 0){
    #####:  960:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  961:    state->deckCount[nextPlayer]--;
        -:  962:  }
    #####:  963:  else if (state->discardCount[nextPlayer] > 0){
    #####:  964:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  965:    state->discardCount[nextPlayer]--;
        -:  966:  }
        -:  967:  else{
        -:  968:    //No Card to Reveal
        -:  969:    if (DEBUG){
        -:  970:      printf("No cards to reveal\n");
        -:  971:    }
        -:  972:  }
        -:  973:      }
        -:  974:      
        -:  975:      else{
    #####:  976:  if (state->deckCount[nextPlayer] == 0){
    #####:  977:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  978:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  979:      state->deckCount[nextPlayer]++;
    #####:  980:      state->discard[nextPlayer][i] = -1;
    #####:  981:      state->discardCount[nextPlayer]--;
        -:  982:    }
        -:  983:          
    #####:  984:    shuffle(nextPlayer,state);//Shuffle the deck
        -:  985:  } 
    #####:  986:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  987:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  988:  state->deckCount[nextPlayer]--;
    #####:  989:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  990:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  991:  state->deckCount[nextPlayer]--;
        -:  992:      }    
        -:  993:           
    #####:  994:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  995:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  996:  state->playedCardCount++;
    #####:  997:  tributeRevealedCards[1] = -1;
        -:  998:      }
        -:  999:
    #####: 1000:      for (i = 0; i <= 2; i ++){
    #####: 1001:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1002:    state->coins += 2;
        -: 1003:  }
        -: 1004:        
    #####: 1005:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1006:    drawCard(currentPlayer, state);
    #####: 1007:    drawCard(currentPlayer, state);
        -: 1008:  }
        -: 1009:  else{//Action Card
    #####: 1010:    state->numActions = state->numActions + 2;
        -: 1011:  }
        -: 1012:      }
        -: 1013:      
    #####: 1014:      return 0;
        -: 1015:    
        -: 1016:    case ambassador:
    #####: 1017:      j = 0;    //used to check if player has enough cards to discard
        -: 1018:
    #####: 1019:      if (choice2 > 2 || choice2 < 0)
        -: 1020:  {
    #####: 1021:    return -1;        
        -: 1022:  }
        -: 1023:
    #####: 1024:      if (choice1 == handPos)
        -: 1025:  {
    #####: 1026:    return -1;
        -: 1027:  }
        -: 1028:
    #####: 1029:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1030:  {
    #####: 1031:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1032:      {
    #####: 1033:        j++;
        -: 1034:      }
        -: 1035:  }
    #####: 1036:      if (j < choice2)
        -: 1037:  {
    #####: 1038:    return -1;        
        -: 1039:  }
        -: 1040:
        -: 1041:      if (DEBUG) 
        -: 1042:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1043:
        -: 1044:      //increase supply count for choosen card by amount being discarded
    #####: 1045:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1046:      
        -: 1047:      //each other player gains a copy of revealed card
    #####: 1048:      for (i = 0; i < state->numPlayers; i++)
        -: 1049:  {
    #####: 1050:    if (i != currentPlayer)
        -: 1051:      {
    #####: 1052:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1053:      }
        -: 1054:  }
        -: 1055:
        -: 1056:      //discard played card from hand
    #####: 1057:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1058:
        -: 1059:      //trash copies of cards returned to supply
    #####: 1060:      for (j = 0; j < choice2; j++)
        -: 1061:  {
    #####: 1062:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1063:      {
    #####: 1064:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1065:    {
    #####: 1066:      discardCard(i, currentPlayer, state, 1);
    #####: 1067:      break;
        -: 1068:    }
        -: 1069:      }
        -: 1070:  }     
        -: 1071:
    #####: 1072:      return 0;
        -: 1073:    
        -: 1074:    case cutpurse:
        -: 1075:
    #####: 1076:      cutpurseAction(state, handPos);
    #####: 1077:      return 0;
        -: 1078:    
        -: 1079:    case embargo: 
        -: 1080:      //+2 Coins
    #####: 1081:      state->coins = state->coins + 2;
        -: 1082:      
        -: 1083:      //see if selected pile is in play
    #####: 1084:      if ( state->supplyCount[choice1] == -1 )
        -: 1085:  {
    #####: 1086:    return -1;
        -: 1087:  }
        -: 1088:      
        -: 1089:      //add embargo token to selected supply pile
    #####: 1090:      state->embargoTokens[choice1]++;
        -: 1091:      
        -: 1092:      //trash card
    #####: 1093:      discardCard(handPos, currentPlayer, state, 1);    
    #####: 1094:      return 0;
        -: 1095:    
        -: 1096:    case outpost:
        -: 1097:      //set outpost flag
    #####: 1098:      state->outpostPlayed++;
        -: 1099:      
        -: 1100:      //discard card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1102:      return 0;
        -: 1103:    
        -: 1104:    case salvager:
        -: 1105:      //+1 buy
    #####: 1106:      state->numBuys++;
        -: 1107:      
    #####: 1108:      if (choice1)
        -: 1109:  {
        -: 1110:    //gain coins equal to trashed card
    #####: 1111:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1112:    //trash card
    #####: 1113:    discardCard(choice1, currentPlayer, state, 1);  
        -: 1114:  }
        -: 1115:      
        -: 1116:      //discard card
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1118:      return 0;
        -: 1119:    
        -: 1120:    case sea_hag:
    #####: 1121:      seaHagAction(state);
    #####: 1122:      return 0;
        -: 1123:    
        -: 1124:    case treasure_map:
        -: 1125:      //search hand for another treasure_map
    #####: 1126:      index = -1;
    #####: 1127:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:  {
    #####: 1129:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1130:      {
    #####: 1131:        index = i;
    #####: 1132:        break;
        -: 1133:      }
        -: 1134:  }
    #####: 1135:      if (index > -1)
        -: 1136:  {
        -: 1137:    //trash both treasure cards
    #####: 1138:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1139:    discardCard(index, currentPlayer, state, 1);
        -: 1140:
        -: 1141:    //gain 4 Gold cards
    #####: 1142:    for (i = 0; i < 4; i++)
        -: 1143:      {
    #####: 1144:        gainCard(gold, state, 1, currentPlayer);
        -: 1145:      }
        -: 1146:        
        -: 1147:    //return success
    #####: 1148:    return 1;
        -: 1149:  }
        -: 1150:      
        -: 1151:      //no second treasure_map found in hand
    #####: 1152:      return -1;
        -: 1153:    }
        -: 1154:  
    #####: 1155:  return -1;
        -: 1156:}
        -: 1157:
    #####: 1158:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1159:{
        -: 1160:  
        -: 1161:  //if card is not trashed, added to Played pile 
    #####: 1162:  if (trashFlag < 1)
        -: 1163:    {
        -: 1164:      //add card to played pile
    #####: 1165:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1166:      state->playedCardCount++;
        -: 1167:    }
        -: 1168:  
        -: 1169:  //set played card to -1
    #####: 1170:  state->hand[currentPlayer][handPos] = -1;
        -: 1171:  
        -: 1172:  //remove card from player's hand
    #####: 1173:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1174:    {
        -: 1175:      //reduce number of cards in hand
    #####: 1176:      state->handCount[currentPlayer]--;
        -: 1177:    }
    #####: 1178:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1179:    {
        -: 1180:      //reduce number of cards in hand
    #####: 1181:      state->handCount[currentPlayer]--;
        -: 1182:    }
        -: 1183:  else  
        -: 1184:    {
        -: 1185:      //replace discarded card with last card in hand
    #####: 1186:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1187:      //set last card to -1
    #####: 1188:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1189:      //reduce number of cards in hand
    #####: 1190:      state->handCount[currentPlayer]--;
        -: 1191:    }
        -: 1192:  
    #####: 1193:  return 0;
        -: 1194:}
        -: 1195:
        2: 1196:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1197:{
        -: 1198:  //Note: supplyPos is enum of choosen card
        -: 1199:  
        -: 1200:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1201:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1202:    {
    #####: 1203:      return -1;
        -: 1204:    }
        -: 1205:  
        -: 1206:  //added card for [whoseTurn] current player:
        -: 1207:  // toFlag = 0 : add to discard
        -: 1208:  // toFlag = 1 : add to deck
        -: 1209:  // toFlag = 2 : add to hand
        -: 1210:
        2: 1211:  if (toFlag == 1)
        -: 1212:    {
    #####: 1213:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1214:      state->deckCount[player]++;
        -: 1215:    }
        2: 1216:  else if (toFlag == 2)
        -: 1217:    {
    #####: 1218:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1219:      state->handCount[player]++;
        -: 1220:    }
        -: 1221:  else
        -: 1222:    {
        2: 1223:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1224:      state->discardCount[player]++;
        -: 1225:    }
        -: 1226:  
        -: 1227:  //decrease number in supply pile
        2: 1228:  state->supplyCount[supplyPos]--;
        -: 1229:   
        2: 1230:  return 0;
        -: 1231:}
        -: 1232:
        8: 1233:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1234:{
        -: 1235:  int i;
        -: 1236:  
        -: 1237:  //reset coin count
        8: 1238:  state->coins = 0;
        -: 1239:
        -: 1240:  //add coins for each Treasure card in player's hand
       28: 1241:  for (i = 0; i < state->handCount[player]; i++)
        -: 1242:    {
       20: 1243:      if (state->hand[player][i] == copper)
        -: 1244:  {
       16: 1245:    state->coins += 1;
        -: 1246:  }
        4: 1247:      else if (state->hand[player][i] == silver)
        -: 1248:  {
    #####: 1249:    state->coins += 2;
        -: 1250:  }
        4: 1251:      else if (state->hand[player][i] == gold)
        -: 1252:  {
    #####: 1253:    state->coins += 3;
        -: 1254:  } 
        -: 1255:    } 
        -: 1256:
        -: 1257:  //add bonus
        8: 1258:  state->coins += bonus;
        -: 1259:
        8: 1260:  return 0;
        -: 1261:}
        -: 1262:
    #####: 1263:void adventurerAction(struct gameState *state)
        -: 1264:{
        -: 1265:  int index;
    #####: 1266:  int currentPlayer = whoseTurn(state);
    #####: 1267:  int nextPlayer = currentPlayer + 1;
        -: 1268:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1269:  int drawntreasure=0;
        -: 1270:  int cardDrawn;
    #####: 1271:  int z = 0;// this is the counter for the temp hand
    #####: 1272:  while(drawntreasure<3){
    #####: 1273:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1274:    shuffle(currentPlayer, state);
        -: 1275:  }
    #####: 1276:  drawCard(currentPlayer, state);
    #####: 1277:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1278:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1279:    drawntreasure++;
        -: 1280:  else{
    #####: 1281:    temphand[z]=cardDrawn;
    #####: 1282:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1283:    z++;
        -: 1284:  }
        -: 1285:      }
    #####: 1286:      while(z-1>=0){
    #####: 1287:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1288:  z=z-1;
        -: 1289:      }
    #####: 1290:}
        -: 1291:
    #####: 1292:void smithyAction(struct gameState *state, int handPos)
        -: 1293:{
        -: 1294:  int i;
    #####: 1295:  int currentPlayer = whoseTurn(state);
        -: 1296:
        -: 1297:  //+3 Cards
    #####: 1298:  for (i = 0; i < 3; i++)
        -: 1299:  {
    #####: 1300:    drawCard(currentPlayer, state);
    #####: 1301:    drawCard(currentPlayer, state);
    #####: 1302:    drawCard(currentPlayer, state);
        -: 1303:  }
        -: 1304:      
        -: 1305:  //discard card from hand
    #####: 1306:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1307:}
        -: 1308:
    #####: 1309:void villageAction(struct gameState *state, int handPos)
        -: 1310:{
    #####: 1311:  int currentPlayer = whoseTurn(state);
        -: 1312:  //+1 Card
    #####: 1313:      drawCard(currentPlayer, state);
        -: 1314:      
        -: 1315:      //+2 Actions
    #####: 1316:      state->numActions = state->numActions + 3;
        -: 1317:      
        -: 1318:      //discard played card from hand
    #####: 1319:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1320:}
        -: 1321:
    #####: 1322:void cutpurseAction(struct gameState *state, int handPos)
        -: 1323:{
        -: 1324:  int i;
        -: 1325:  int j;
        -: 1326:  int k;
    #####: 1327:  int currentPlayer = whoseTurn(state);
        -: 1328:
    #####: 1329:  updateCoins(currentPlayer, state, 2);
    #####: 1330:      for (i = 1; i < state->numPlayers; i++)
        -: 1331:  {
    #####: 1332:    if (i != currentPlayer)
        -: 1333:      {
    #####: 1334:        for (j = 0; j < state->handCount[i]; j++)
        -: 1335:    {
    #####: 1336:      if (state->hand[i][j] == copper)
        -: 1337:        {
    #####: 1338:          discardCard(j, i, state, 0);
    #####: 1339:          break;
        -: 1340:        }
    #####: 1341:      if (j == state->handCount[i])
        -: 1342:        {
    #####: 1343:          for (k = 0; k < state->handCount[i]; k++)
        -: 1344:      {
        -: 1345:        if (DEBUG)
        -: 1346:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1347:      } 
    #####: 1348:          break;
        -: 1349:        }   
        -: 1350:    }
        -: 1351:          
        -: 1352:      }
        -: 1353:        
        -: 1354:  }       
        -: 1355:
        -: 1356:      //discard played card from hand
    #####: 1357:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1358:}
        -: 1359:
    #####: 1360:void seaHagAction(struct gameState *state)
        -: 1361:{
        -: 1362:  int i;
    #####: 1363:  int currentPlayer = whoseTurn(state);
        -: 1364:  
    #####: 1365:  for (i = 0; i < state->numPlayers; i++){
    #####: 1366:  if (i != currentPlayer){
    #####: 1367:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1368:    state->discardCount[i]++;
    #####: 1369:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1370:  }
        -: 1371:      }
    #####: 1372:}
        -: 1373://end of dominion.c
